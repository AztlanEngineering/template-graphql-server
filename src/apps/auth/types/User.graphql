extend type Query {
 	allUsers: [User]!
 	getUser(id:ID!): User!
 	me: MinUser
  hello: String!
}

extend type Mutation {
  #Admin Mutations
 	addUser(input:UserInput): User!,
 	updateUser(id: ID!, input:UserInput): User!,
 	deleteUser(id: ID!): ID!,
 	setSuperuser(id: ID!, value: String!): Boolean!,
 	setUserPassword(id: ID!, value: String!): Boolean!,

  #User Mutations
 	login(input: UserLogin): Token!,
  signup(input: UserInput): Token!,
 	setMyPassword(oldPassword:String, password: String!): Boolean!,
 	updateMe(input:MeInput): User!,
}

input UserInput {
  firstName: String
  lastName: String
  email: String
  username: String
  password: String
  superuser: Boolean
  operator: Boolean
  handle: String
  profilePicture: String
  isActive:Boolean
}

input MeInput {
  firstName: String
  lastName: String
  email: String
  username: String
  password: String
  handle: String
  profilePicture: String
}

input UserLogin {
  email: String!
  password:String!
}

type User {
 	id: ID
 	firstName: String
 	lastName: String
 	email: String
  username: String
  superuser: Boolean
  operator: Boolean
  password: String
  handle: String
  isActive:Boolean
  onboardingStatus:Int
  createdAt:Float
  updatedAt:Float
}

type MinUser {
 	id: ID
  email:String
 	firstName: String
 	lastName: String
  username: String
  handle: String
  isActive:Boolean
  onboardingStatus:Int
  createdAt:Float
  updatedAt:Float
}

